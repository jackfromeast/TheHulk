const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');

const exploitGenPath = '/home/jackfromeast/Desktop/TheHulk/exploit-gen/src/exploit.js';

/**
 * @description
 * --------------------------------
 * The callback function will be invoked after visiting the page
 *
 * @param {Visitor} visitor 
 * @param {*} page 
 */
async function generateExploitCallbacks(visitor, page) {
  const taintflowsPath = path.join(visitor.webpageCrawlerFolder, 'taintflows.json');
  const exploitPath = path.join(visitor.webpageCrawlerFolder, 'exploit.txt');
  await runExploitGen(taintflowsPath, visitor.logger);
}

async function runExploitGen(traceFile, logger) {
  if (await isFileEmpty(traceFile, logger)) {
    logger.warn(`Skipping empty taintflows.json: ${traceFile}`);
    return;
  }

  const outputFile = path.join(path.dirname(traceFile), 'exploit.txt');
  const command = `node ${exploitGenPath} -t ${traceFile} -o ${outputFile}`;

  try {
    await new Promise((resolve) => {
      exec(command, (error, stdout, stderr) => {
        if (error) {
          logger.error(`Error executing ${command}: ${error.message}`);
          return resolve();
        }

        resolve();
      });
    });
  } catch (unexpectedError) {
    logger.error(`Unexpected error processing ${traceFile}: ${unexpectedError.message}`);
  }
}

async function isFileEmpty(filePath, logger) {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    return content.trim().length === 0 || content.trim() === '[]';
  } catch (error) {
    return true;
  }
}

module.exports = {
  generateExploitCallbacks
};