import fs from 'fs';
import path from 'path';

const directoryPath = './webidl';

const DOM_NODE_STANDARD = {};

function parseWebIDL(content) {
  const tagNameMatch = content.match(/interface (\w+)(?:\s*:\s*(\w+))?/);
  const tagName = tagNameMatch ? tagNameMatch[1] : null;
  const parentTagName = tagNameMatch ? tagNameMatch[2] : null;

  const attributesDOMString = [];
  const reflectAttributesDOMString = [];
  const apis = [];

  const lines = content.split('\n');
  lines.forEach(line => {
    line = line.trim();

    if (line.includes('attribute DOMString')) {
      const attrMatch = line.match(/attribute DOMString (\w+);/);
      const isReflect = line.includes('Reflect');
      if (attrMatch) {
        attributesDOMString.push(attrMatch[1]);
        if (isReflect) {
          reflectAttributesDOMString.push(attrMatch[1]);
        }
      }
    } else if (/DOMString \w+\(/.exec(line)) {
      const apiMatch = line.match(/DOMString (\w+)\(/);
      if (apiMatch) {
        apis.push(apiMatch[1]);
      }
    }
  });

  return { tagName, parentTagName, attributesDOMString, reflectAttributesDOMString, apis };
}

function applyInheritance() {
  for (const [tagName, data] of Object.entries(DOM_NODE_STANDARD)) {
    let currentParent = data.parentTagName;
    while (currentParent) {
      const parentData = DOM_NODE_STANDARD[currentParent];
      if (parentData) {
        // Inherit attributes and APIs
        data.attributesDOMString = [...new Set([...parentData.attributesDOMString, ...data.attributesDOMString])];
        data.reflectAttributesDOMString = [...new Set([...parentData.reflectAttributesDOMString, ...data.reflectAttributesDOMString])];
        data.apis = [...new Set([...parentData.apis, ...data.apis])];
        currentParent = parentData.parentTagName;
      } else {
        currentParent = null;
      }
    }
  }
}

fs.readdir(directoryPath, (err, files) => {
  if (err) {
    console.error('Unable to scan directory:', err);
    return;
  }

  // First, parse all files and store them in the DOM_NODE_STANDARD object
  files.forEach(file => {
    if (path.extname(file) === '.webidl') {
      const filePath = path.join(directoryPath, file);
      const content = fs.readFileSync(filePath, 'utf-8');
      const { tagName, parentTagName, attributesDOMString, reflectAttributesDOMString, apis } = parseWebIDL(content);

      if (tagName) {
        DOM_NODE_STANDARD[tagName] = {
          parentTagName: parentTagName || null,
          attributesDOMString: attributesDOMString,
          reflectAttributesDOMString: reflectAttributesDOMString,
          apis: apis
        };
      }
    }
  });

  // Apply inheritance after all files have been parsed
  applyInheritance();

  fs.writeFileSync('dom-node-standard.js', 'const DOM_NODE_STANDARD = ' + JSON.stringify(DOM_NODE_STANDARD, null, 2) + ';\n export { DOM_NODE_STANDARD };');
});
