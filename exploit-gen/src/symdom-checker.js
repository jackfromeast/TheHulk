import { SymbolicDOMTree } from "./symdom-tree.js";
import { ClauseBuilder, UnitClause, CompoundClause, RootFormula } from "./clause.js";

export class SymbolicDOMChecker {
  /**
   * Ensure that the current constraints are in Disjunctive Normal Form (DNF).
   * @note It could be a conjunction of root formulas and unit clauses.
   * @returns {boolean} True if the constraints are in DNF, false otherwise.
   */
  static checkDNF(constraints) {
    if (!constraints) { return true; }

    // If the constraint is a single unit clause or root formula, it's DNF.
    if (constraints instanceof UnitClause || constraints instanceof RootFormula) {
      return true;
    }

    if (constraints instanceof CompoundClause && constraints.operator === 'and') {
      return constraints.clauses.every(SymbolicDOMChecker.checkDNF);
    }
    
    function noCompoundOR(clause) {
      if (clause instanceof CompoundClause && clause.operator === 'or') {
        return false;
      } else if (clause instanceof RootFormula) {
        return true;
      } else if (clause instanceof CompoundClause) {
        return clause.clauses.every(noCompoundOR);
      } else {
        return true;
      }
    }

    if (constraints instanceof CompoundClause && constraints.operator === 'or') {
      for (const clause of constraints.clauses) {
        if (clause instanceof UnitClause || clause instanceof RootFormula) { continue; }
        if (noCompoundOR(clause)) { continue; } else { return false; };
      }
      return true;
    }

    return false;
  }

  /**
   * Ensure that the constraints has no unit clauses.
   * @returns {boolean} True if the constraints only contain root formulas, false otherwise.
   */
  static checkNoUnitClauses(constraints) {
    if (!constraints) { return true; }

    if (constraints instanceof UnitClause) { return false; }
    if (constraints instanceof RootFormula) { return true; }
    if (constraints instanceof CompoundClause) {
      return constraints.clauses.every(SymbolicDOMChecker.checkNoUnitClauses);
    }

    return true;
  }

  /**
   * Check if the constraints are in Conjunctive Normal Form (CNF) of unit claues.
   * @returns {boolean} True if the constraints are in CNF, false otherwise.
   */
  static checkCNFOfUnitClauses(constraints) {
    if (constraints instanceof UnitClause) {
      return true;
    }

    function isUnitClause(clause) {
      if (clause instanceof UnitClause) { return true; }
      else { return false; }
    }

    if (constraints instanceof CompoundClause) {
      if (constraints.operator === 'and') {
        return constraints.clauses.every(isUnitClause);
      } else {
        return false;
      }
    }

    return false;
  }
}
