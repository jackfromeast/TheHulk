/**
 * The symbolic DOM node.
 * 
 * We should be able to define its type, attributes, and children nodes.
 * It is symbolic, meaning it represents a set of possible DOM nodes that satisfy the constraints.
 * 
 * @param {string} nodeType - The type of the node.
 * @param {Object<AttributeName:String>} attributes - The attributes of the node.
 * @param {Array[SymbolicDOMNode]} children - The children of the node.
 */
export class SymbolicDOMNode {
  constructor(nodeType='*', attributes='*', children='*', isRoot=false) {
    this.nodeUniqueId = Symbol();
    this.nodeType = nodeType;
    this.attributes = attributes;
    this.children = children;
    this.isRoot = isRoot;
  }

  setAsRoot() {
    this.isRoot = true;
  }

  addChild(childNode) {
    this.children.push(childNode);
  }

  setAttribute(attributeName, attributeValue) {
    this.attributes[attributeName] = attributeValue;
  }

  /**
   * Generates the exploit DOM node.
   */
  concrete() {
    
  }
}

