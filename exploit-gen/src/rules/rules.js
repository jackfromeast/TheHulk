import { WindowToDOMRule } from './window-to-dom.js';
import { DocumentToDOMRule } from './document-to-dom.js';
import { DOMToDOMRule } from './dom-to-dom.js';
import { DOMToStringRule } from './dom-to-string.js';

export class Rules {
  /**
   * Entry point for finding all the rules.
   */
  constructor() {
    this.rules = {
      'Window-to-DOM': new WindowToDOMRule(),
      'Document-to-DOM': new DocumentToDOMRule(),
      'DOM-to-DOM': new DOMToDOMRule(),
      'DOM-to-String': new DOMToStringRule()
    };
  }

  /**
   * Return the rules for the given rule set.
   * 
   * @param {*} ruleId: The ID of the rule. E.g. rule01 or 01.
   * @returns {RootFormula} The rule with the given ID.
   */
  getRuleById(ruleId) {
    for (const ruleSet in this.rules) {
      if (!ruleId.startsWith("rule")){
        ruleId = "rule" + ruleId;
      }
      let rules = this.rules[ruleSet].rules;
      if (rules[ruleId]) {
        return rules[ruleId];
      }
    }
  }
}
  