import { SymbolicDOMTree } from '../symbolic-dom-tree.js';
import { THETHING_TS1, THETHING_TS3, THETHING_TS4, THETHING_TS5, THETHING_TS6 } from '../constants/thething.js';

export class DOMToDOMRule {
  /**
   * Entry point for applying rules.
   * @param {String} operation 
   * @param {args} 
   */
  static apply(operation, ...args) {
    if (operation == 'getField') {
      return DOMToDOMRule.getFieldOp(...args);
    } else {
      return [];
    }
  }

  /**
   * Returns the virtual DOM element(s) for the given field that can achieve WINDOW2DOM objective.
   * 
   * Here, we assume *base* is attacker-controlled clobberable DOM element.
   * 
   * @param {*} base 
   * @param {*} offset 
   * @returns {Array<VNode>}: The virtual DOM element(s).
   */
  static getFieldOp(base, offset) {
    let allNodes = [];
    
    // DOM.X-RULE-1
    // form tag with attribute and has child with name=offset || id=offset attribute
    let symbolicNode1 = new SymbolicDOMTree();
    symbolicNode1.declareNode('$node1');
    symbolicNode1.declareNode('$node2');
    symbolicNode1.addConstraint('isRoot', '$node1');
    symbolicNode1.addConstraint('hasChild', '$node1', '$node2');
    symbolicNode1.addConstraint('hasType', '$node1', 'form');
    symbolicNode1.addConstraint('hasAttribute', '$node2', 'id', offset);
    symbolicNode1.addConstraint('hasAttribute', '$node2', 'name', offset);
    symbolicNode1.addConstraint('setAttributeOR', '$node2', ["id", "name"]);
    symbolicNode1.addConstraint('hasType', '$node2', [...THETHING_TS3, ...THETHING_TS4]); 
    allNodes.push(symbolicNode1);

    // DOM.X-RULE-2
    // iframe tag with attribute and has child with name=offset and id=offset attribute
    let symbolicNode2 = new SymbolicDOMTree();
    symbolicNode2.declareNode('$node1');
    symbolicNode2.declareNode('$node2');
    symbolicNode2.addConstraint('isRoot', '$node1');
    symbolicNode2.addConstraint('hasChild', '$node1', '$node2');
    symbolicNode2.addConstraint('hasType', '$node1', 'form');
    symbolicNode2.addConstraint('hasType', '$node2', 'iframe');
    symbolicNode2.addConstraint('hasAttribute', '$node2', 'id', offset);
    symbolicNode2.addConstraint('hasAttribute', '$node2', 'name', offset);
    allNodes.push(symbolicNode2);

    // DOM.X-RULE-3
    // HTMLCollection with same id and child with name=offset attribute
    let symbolicNode3 = new SymbolicDOMTree();
    symbolicNode3.declareNode('$node1');
    symbolicNode3.declareNode('$node2');
    symbolicNode3.declareString('$id');
    symbolicNode3.addConstraint('isRoot', '$node1');
    symbolicNode3.addConstraint('hasSibiling', '$node1', '$node2');
    symbolicNode3.addConstraint('hasType', '$node1', ['svg', 'customtag', ...THETHING_TS1]);
    symbolicNode3.addConstraint('hasType', '$node2', ['svg', 'customtag', ...THETHING_TS1]);
    symbolicNode3.addConstraint('hasAttribute', '$node1', 'id', '$id');
    symbolicNode3.addConstraint('hasAttribute', '$node2', 'id', '$id');
    symbolicNode3.addConstraint('hasAttribute', '$node2', 'name', offset);
    allNodes.push(symbolicNode3);


    // DOM.X-RULE-4
    // HTMLCollection with same name and child with id=offset attribute
    let symbolicNode4 = new SymbolicDOMTree();
    symbolicNode4.declareNode('$node1');
    symbolicNode4.declareNode('$node2');
    symbolicNode4.declareString('$name');
    symbolicNode4.addConstraint('isRoot', '$node1');
    symbolicNode4.addConstraint('hasSibiling', '$node1', '$node2');
    symbolicNode4.addConstraint('hasType', '$node1', ['applet', 'embed', 'form', 'iframe', ...THETHING_TS4]);
    symbolicNode4.addConstraint('hasType', '$node2', ['applet', 'embed', 'form', 'iframe', ...THETHING_TS4]);
    symbolicNode4.addConstraint('hasAttribute', '$node1', 'name', '$name');
    symbolicNode4.addConstraint('hasAttribute', '$node2', 'name', '$name');
    symbolicNode4.addConstraint('hasAttribute', '$node2', 'id', offset);
    allNodes.push(symbolicNode4);

    // TODO: Add more refer to the TheThing's Table 2, Section: HTMLCollection, Nested Window Proxy, and Form Parent-Child

    return allNodes;
  }
}


export default DOMToDOMRule;

let expNodes = DOMToDOMRule.apply('getField', 'x', 'y');
expNodes.forEach(node => { console.log(node.concreteToString().flat()); });