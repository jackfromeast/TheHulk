import { SymbolicDOMTree } from '../symbolic-dom-tree.js';
import { THETHING_TS4 } from '../constants/thething.js';

export class DocumentToDOMRule {
  /**
   * Entry point for applying rules.
   * @param {String} operation 
   * @param {args} 
   */
  static apply(operation, ...args) {
    if (operation == 'getField') {
      return DocumentToDOMRule.getFieldOp(...args);
    } else {
      return [];
    }
  }

  /**
   * Returns the virtual DOM element(s) for the given field that can achieve DOCUMENT2DOM objective.
   * @param {*} base 
   * @param {*} offset 
   * @returns {Array<VNode>}: The virtual DOM element(s).
   */
  static getFieldOp(base, offset) {
    let allNodes = [];
    if (base !== 'document') { return allNodes; }

    // DOCUMENT.X-RULE-1
    // TS4, embed, from tags with name=offset attribute
    let symbolicNode1 = new SymbolicDOMTree();
    symbolicNode1.declareNode('$node1');
    symbolicNode1.addConstraint('isRoot', '$node1');
    symbolicNode1.addConstraint('hasAttribute', '$node1', 'name', offset);
    symbolicNode1.addConstraint('hasTagName', '$node1', ['form', 'embed', ...THETHING_TS4]); 
    allNodes.push(symbolicNode1);

    // DOCUMENT.X-RULE-2
    // iframe with name=offset attribute
    let symbolicNode2 = new SymbolicDOMTree();
    symbolicNode2.declareNode('$node1');
    symbolicNode2.addConstraint('isRoot', '$node1');
    symbolicNode2.addConstraint('hasAttribute', '$node1', 'name', offset);
    symbolicNode2.addConstraint('hasTagName', '$node1', 'iframe');
    allNodes.push(symbolicNode2);

    // DOCUMENT.X-RULE-3
    // object with name=offset attribute
    let symbolicNode3 = new SymbolicDOMTree();
    symbolicNode3.declareNode('$node1');
    symbolicNode3.addConstraint('isRoot', '$node1');
    symbolicNode3.addConstraint('hasAttribute', '$node1', 'name', offset);
    symbolicNode3.addConstraint('hasTagName', '$node1', 'object');
    allNodes.push(symbolicNode3);

    return allNodes;
  }
}

export default DocumentToDOMRule;


// let expNodes = DocumentToDOMRule.apply('getField', 'document', 'scripts');
// expNodes.forEach(node => { console.log(node.concreteToString().flat()); });