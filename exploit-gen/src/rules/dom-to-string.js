import { Utils } from '../utils.js';
import { SymbolicDOMTree } from '../symbolic-dom-tree.js';
import { DOM_NODE_STANDARD } from '../constants/dom-node-standard.js';
import { textContentNodeType } from '../constants/thehulk.js';
import { THETHING_TS1, THETHING_TS3, THETHING_TS4, THETHING_TS5, THETHING_TS6 } from '../constants/thething.js';

export class DOMToStringRule {
  /**
   * Entry point for applying rules.
   * @param {String} operation 
   * @param {args} 
   */
  static apply(operation, ...args) {
    if (operation == 'getField') {
      return DOMToStringRule.getFieldOp(...args);
    } else if (operation == 'invokeFunc') {
      return DOMToStringRule.invokeFuncOp(...args);
    } else if (operation == 'binaryOp') {
      return DOMToStringRule.binaryOp(...args);
    }
  }

  /**
   * Returns the virtual DOM element(s) for the given field that can achieve WINDOW2DOM objective.
   * 
   * Here, we assume *base* is attacker-controlled clobberable DOM element.
   * 
   * @param {*} base 
   * @param {*} offset 
   * @returns {Array<VNode>}: The virtual DOM element(s).
   */
  static getFieldOp(base, offset) {
    let allNodes = [];
    
    // DOM.X->STRING-RULE-1
    // We dynamicly search the offset in the DOM_NODE_STANDARD and determine the type of the node.
    if (offset === "textContent") {
      let symbolicNode1 = new SymbolicDOMTree();
      symbolicNode1.declareNode('$node1');
      symbolicNode1.declareString('$payload');
      symbolicNode1.addConstraint('isRoot', '$node1');
      symbolicNode1.addConstraint('hasTagName', '$node1', [...textContentNodeType]);
      symbolicNode1.addConstraint('hasAttribute', '$node1', "textContent", '$payload');
      allNodes.push(symbolicNode1);
    }

    return allNodes;
  }
}


export default DOMToStringRule;

let expNodes = DOMToStringRule.apply('getField', 'x', 'textContent');
expNodes.forEach(node => { console.log(node.concreteToString().flat()); });
