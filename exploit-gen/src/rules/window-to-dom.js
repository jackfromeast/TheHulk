import { SymbolicDOMTree } from '../symbolic-dom-tree.js';
import { THETHING_TS2, THETHING_TS4, THETHING_TS5, THETHING_TS6 } from '../constants/thething.js';

export class WindowToDOMRule {
  /**
   * Entry point for applying rules.
   * @param {String} operation 
   * @param {args} 
   */
  static apply(operation, ...args) {
    if (operation == 'getField') {
      return WindowToDOMRule.getFieldOp(...args);
    } else {
      return [];
    }
  }

  /**
   * Returns the virtual DOM element(s) for the given field that can achieve WINDOW2DOM objective.
   * @param {*} base 
   * @param {*} offset 
   * @returns {Array<VNode>}: The virtual DOM element(s).
   */
  static getFieldOp(base, offset) {
    let allNodes = [];
    if (base !== 'window') { return allNodes; }

    // WINDOW.X-RULE-1
    // TS2 tags with id=offset attribute
    let symbolicNode1 = new SymbolicDOMTree();
    symbolicNode1.declareNode('$node1');
    symbolicNode1.addConstraint('isRoot', '$node1');
    symbolicNode1.addConstraint('hasAttribute', '$node1', 'id', offset);
    symbolicNode1.addConstraint('hasTagName', '$node1', [...THETHING_TS2]); 
    allNodes.push(symbolicNode1);

    // WINDOW.X-RULE-2
    // customtag, iframe, and TS5 tags with id=offset attribute
    let symbolicNode2 = new SymbolicDOMTree();
    symbolicNode2.declareNode('$node2');
    symbolicNode2.addConstraint('isRoot', '$node2');
    symbolicNode2.addConstraint('hasAttribute', '$node2', 'id', offset);
    symbolicNode2.addConstraint('hasTagName', '$node2', ['customtag', 'iframe', ...THETHING_TS5]);
    allNodes.push(symbolicNode2);

    // WINDOW.X-RULE-3
    // TS6, bdi, bdo, big tags with id=offset attribute
    let symbolicNode3 = new SymbolicDOMTree();
    symbolicNode3.declareNode('$node3');
    symbolicNode3.addConstraint('isRoot', '$node3');
    symbolicNode3.addConstraint('hasAttribute', '$node3', 'id', offset);
    symbolicNode3.addConstraint('hasTagName', '$node3', [...THETHING_TS6, 'bdi', 'bdo', 'big']);
    allNodes.push(symbolicNode3);

    // WINDOW.X-RULE-4
    // TS4, embed, and form tags with n=offset attribute
    let symbolicNode4 = new SymbolicDOMTree();
    symbolicNode4.declareNode('$node4');
    symbolicNode4.addConstraint('isRoot', '$node4');
    symbolicNode4.addConstraint('hasAttribute', '$node4', 'name', offset);
    symbolicNode4.addConstraint('hasTagName', '$node4', [...THETHING_TS4, 'embed', 'form']);
    allNodes.push(symbolicNode4);

    // WINDOW.X-RULE-5
    // video, wbr, xmp tags with id=offset attribute
    let symbolicNode5 = new SymbolicDOMTree();
    symbolicNode5.declareNode('$node5');
    symbolicNode5.addConstraint('isRoot', '$node5');
    symbolicNode5.addConstraint('hasAttribute', '$node5', 'id', offset);
    symbolicNode5.addConstraint('hasTagName', '$node5', ['video', 'wbr', 'xmp']);
    allNodes.push(symbolicNode5);

    // WINDOW.X-RULE-6
    // aside, audio, b tags with id=offset attribute
    let symbolicNode6 = new SymbolicDOMTree();
    symbolicNode6.declareNode('$node6');
    symbolicNode6.addConstraint('isRoot', '$node6');
    symbolicNode6.addConstraint('hasAttribute', '$node6', 'id', offset);
    symbolicNode6.addConstraint('hasTagName', '$node6', ['aside', 'audio', 'b']);
    allNodes.push(symbolicNode6);

    // WINDOW.X-RULE-7
    // applet tags with n=offset attribute
    let symbolicNode7 = new SymbolicDOMTree();
    symbolicNode7.declareNode('$node7');
    symbolicNode7.addConstraint('isRoot', '$node7');
    symbolicNode7.addConstraint('hasAttribute', '$node7', 'name', offset);
    symbolicNode7.addConstraint('hasTagName', '$node7', 'applet');
    allNodes.push(symbolicNode7);

    // WINDOW.X-RULE-8
    // iframe tags with n=offset attribute
    let symbolicNode8 = new SymbolicDOMTree();
    symbolicNode8.declareNode('$node8');
    symbolicNode8.addConstraint('isRoot', '$node8');
    symbolicNode8.addConstraint('hasAttribute', '$node8', 'name', offset);
    symbolicNode8.addConstraint('hasTagName', '$node8', 'iframe');
    allNodes.push(symbolicNode8);

    // WINDOW.X-RULE-9
    // base tags with id=offset attribute
    let symbolicNode9 = new SymbolicDOMTree();
    symbolicNode9.declareNode('$node9');
    symbolicNode9.addConstraint('isRoot', '$node9');
    symbolicNode9.addConstraint('hasAttribute', '$node9', 'id', offset);
    symbolicNode9.addConstraint('hasTagName', '$node9', 'base');
    allNodes.push(symbolicNode9);

    // WINDOW.X-RULE-10
    // article tags with id=offset attribute
    let symbolicNode10 = new SymbolicDOMTree();
    symbolicNode10.declareNode('$node10');
    symbolicNode10.addConstraint('isRoot', '$node10');
    symbolicNode10.addConstraint('hasAttribute', '$node10', 'id', offset);
    symbolicNode10.addConstraint('hasTagName', '$node10', ['article']);
    allNodes.push(symbolicNode10);

    return allNodes;
  }
}


export default WindowToDOMRule;

// let expNodes = WindowToDOMRule.apply('getField', 'window', 'scripts');
// expNodes.forEach(node => { console.log(node.concreteToString().flat()); });