#!/usr/bin/env node

import fs from 'fs';
import { program } from 'commander';
import { TaintDependencyGraph } from './taint-dependency-graph.js';
import { Utils } from './utils.js';

program
  .option('-t, --trace <path>', 'Path to the taint trace JSON file')
  .option('-o, --output <file>', 'Optional output file to save the payloads')
  .parse(process.argv);

const options = program.opts();
if (!options.trace) {
  console.error('Error: --trace argument is required.');
  process.exit(1);
}

try {
  let taintTraces = Utils.readTaintFlows(options.trace);
  
  if (taintTraces.length === 0) {
    console.error('Error: No taint traces found in the provided file.');
    process.exit(1);
  }

  let results = new Set();

  for (const trace of taintTraces) {
    const graph = new TaintDependencyGraph(trace);
    graph.attachObjectives(graph.modelObjectives());
    const payloads = graph.attachAndSolve();
    
    for (const payload of payloads) {
      results.add(payload);
    }
  }

  let outputText = Array.from(results)
    .map(payload => "=".repeat(20) + '\n' + payload)
    .join('\n');

  if (options.output) {
    fs.writeFileSync(options.output, outputText, 'utf8');
    console.log(`Generated exploits saved to ${options.output}`);
  } else {
    console.log(outputText);
  }
} catch (error) {
  console.error('Error processing the taint trace:', error.message);
  process.exit(1);
}
