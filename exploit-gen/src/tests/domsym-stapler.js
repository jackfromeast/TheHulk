import { SymbolicDOMSolver } from "../symdom-solver.js"
import { SymbolicDOMTree } from "../symdom-tree.js"
import { Staplar } from "../stapler.js";
import { THEHULK_TNS1, THEHULK_TNS2, THEHULK_TNS3, THEHULK_TNS4 } from "../constants/thehulk-tag-set.js"
import { UnitClause, CompoundClause, ClauseBuilder, RootFormula } from '../clause.js';

let solver = new SymbolicDOMSolver();

// ===== Rule C4 Start =====
solver.addConstraint('and', new UnitClause(null, 'declare', '$R1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$2'));
solver.addConstraint('and', new UnitClause(null, 'declareConstantString', '$P', 'textContent'));

let rule20 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'hasTagName', '$R1', 'svg'));
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'declareString', '$Payload'));
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'hasAttribute', '$R1', '$P', '$Payload'));

solver.addConstraint('and', rule20);
solver.store("C4", solver.reduceToDNFRootFormulasOnly());
solver.clear();

// ===== Rule C4 end =====
let ruleC3 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declare', '$R1'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declare', '$R2'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'hasSibling', '$R1', '$R2'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R2', '$2'));
solver.addConstraint('and', ruleC3);

var tmpRoots = solver.reduceToDNFRootFormulasOnly();
solver.mergeStoredRootsWithOutside(tmpRoots);
solver.store("C3", solver.DNFTypeRootFormulas);
solver.clear();