import { SymbolicDOMSolver } from "../symdom-solver.js"
import { SymbolicDOMTree } from "../symdom-tree.js"
import { UnitClause, CompoundClause, ClauseBuilder, RootFormula } from '../clause.js';

let solver = new SymbolicDOMSolver();

// ===== Rule 05 Start =====
let rule05 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
rule05.addNewUnitClause('and', new UnitClause(rule05.namespace, 'hasTagName', '$R1', 'TNS2'));
rule05.addNewUnitClause('and', new UnitClause(rule05.namespace, 'hasAttribute', '$R1', 'name', '$P'));
rule05.addNewUnitClause('and', new UnitClause(rule05.namespace, 'declare', '$R1'));
rule05.addNewUnitClause('and', new UnitClause(rule05.namespace, 'declare', '$P'));
// ===== Rule 05 End =====

// ===== Rule 07 Start =====
let rule07 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
rule07.addNewUnitClause('and', new UnitClause(rule07.namespace, 'declare', '$R1')); // first new root formula with R1 then declare R1????
rule07.addNewUnitClause('and', new UnitClause(rule07.namespace, 'declare', '$P'));
rule07.addNewUnitClause('and', new UnitClause(rule07.namespace, 'length(getSiblings)', '$R1', '>=', '1'));

// For the forall(getSiblings(R1), tempCompundClause) clause
// We first add the following constraints to the symbolic DOM tree
// Then, we add the forall(getSiblings(R1), tempCompundClause) to the lazyConstraints of symbolic DOM tree
// which will only checked when there is new node added to the symbolic DOM tree
let branchClause1 = new CompoundClause('and', [new UnitClause(rule07.namespace, 'hasTagName', '$R2', 'TNS2'), new UnitClause(rule07.namespace, 'hasAttribute', '$R2', 'name', '$P')]);
let branchClause2 = new CompoundClause('and', [new UnitClause(rule07.namespace, 'hasTagName', '$R2', 'object'), new UnitClause(rule07.namespace, 'hasAttribute', '$R2', 'id', '$P')]);
let tempCompoundClause = new CompoundClause('or', [branchClause1, branchClause2]);
rule07.addNewCompoundClause('and', tempCompoundClause);
rule07.addNewUnitClause('and', new UnitClause(rule07.namespace, 'hasSibling', '$R1', '$R2'));
rule07.addNewUnitClause('and', new UnitClause(rule07.namespace, 'forall', 'getSiblings(R1)', 'tempCompoundClause'));
// ===== Rule 07 End =====



// ===== Rule C4pre Start =====
var C4pre = [
    ['declareNode', '$node1'],
    ['declareMatch', '$node1', '$2'], 
    ['declareConstantString', '$P', 'textContent']
];
solver.addConstraint('and', new UnitClause(null, 'declare', '$R1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$2'));
solver.addConstraint('and', new UnitClause(null, 'declareConstantString', '$P', 'textContent'));
// ===== Rule C4pre end =====

// ===== Rule 20 Start =====
var atomic20 = [
    ['isRoot', '$node1'],
    // ['hasTagName', '$node1', THETHING_TS*],
    ['hasTagName', '$node1', ["a", "abbr", "iframe", "form"]],
    ['declareString', '$payload'],
    ['hasAttribute', '$node1', '$P', '$payload']
];
let rule20 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
// rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'hasTagName', '$R1', 'TNS*'));
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'hasTagName', '$R1', 'TNS1'));
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'declareString', '$Payload'));
rule20.addNewUnitClause('and', new UnitClause(rule20.namespace, 'hasAttribute', '$R1', '$P', '$Payload'));
// ===== Rule 20 End =====
solver.addConstraint('and', rule20);
solver.store("C4", solver.reduceToDNFRootFormulasOnly());
solver.clear();
// ===== Rule C4 End =====


// ===== Rule C3 Start =====
var C3 = [
    ['declareNode', '$node1'],
    ['declareNode', '$node2'],
    ['isRoot', '$node1'],
    ['declareMatch', '$node1', '$1'], 
    ['declareMatch', '$node2', '$2'],
    ['hasSibling', '$node1', '$node2']
];
let ruleC3 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declare', '$R1'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declare', '$R2'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'hasSibling', '$R1', '$R2'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R2', '$2'));

solver.addConstraint('and', ruleC3);
var tmpRoots = solver.reduceToDNFRootFormulasOnly();
// now we have C3 in tmpRoots, C4 in solver.storedConstraintSet, merge them!
solver.mergeStoredRootsWithOutside(tmpRoots);

// solver.store("C3", solver.DNFTypeRootFormulas);
solver.clear();
// ===== Rule C3 End =====

// now inside solver we have C3 and C4, let us merge them!



// // // ===== Rule C1 Start =====
// solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$1'));
// solver.addConstraint('and', new UnitClause(null, 'equal', '$P', 'scripts'));
// solver.addConstraint('and', new CompoundClause('or', [rule05, rule07]));
// // ===== Rule C1 End =====

// solver.rawConstraints.print();
// console.log("==========")
// solver.store("C1", solver.reduceToDNFRootFormulasOnly());
// solver.clear();


// ===== Rule C2 Start =====
// ===== Rule C2 End =====



// let finals = solver.mergeStoredConstraintSet("ALL");
// for (let i = 0; i < finals.length; i++) {
//   finals[i].print();
// }