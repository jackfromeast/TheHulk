import { SymbolicDOMSolver } from "../symdom-solver.js"
import { Rules } from "../rules/rules.js";
import { UnitClause, CompoundClause, RootFormula } from '../clause.js';

let solver = new SymbolicDOMSolver();
let rules = new Rules();

let rule05 = rules.getRuleById('05');
let rule07 = rules.getRuleById('07');
let rule20 = rules.getRuleById('20');


// ===== Rule C4 Start =====
solver.addConstraint('and', new UnitClause(null, 'declareNode', '$R1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$2'));
solver.addConstraint('and', new UnitClause(null, 'declareConstantString', '$P', 'textContent'));
solver.addConstraint('and', rule20);
solver.store("C4", solver.reduceToDNFRootFormulasOnly());
solver.clear();
// ===== Rule C4 End =====


// ===== Rule C3 Start =====
let ruleC3 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declareNode', '$R1'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'declareNode', '$R2'));
ruleC3.addNewUnitClause('and', new UnitClause(ruleC3.namespace, 'hasSibling', '$R1', '$R2'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$1'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R2', '$2'));
solver.addConstraint('and', ruleC3);
var tmpRoots = solver.reduceToDNFRootFormulasOnly();
solver.mergeStoredRootsWithOutside(tmpRoots);
solver.store("C3", solver.DNFTypeRootFormulas);
solver.clear();
// ===== Rule C3 End =====


// ===== Rule C2 Start =====
let ruleC2 = new RootFormula(null, [new UnitClause(null, 'isRoot', '$R1')]);
ruleC2.addNewUnitClause('and', new UnitClause(ruleC2.namespace, 'declareNode', '$R1'));
ruleC2.addNewUnitClause('and', new UnitClause(ruleC2.namespace, 'declareNode', '$R2'));
ruleC2.addNewUnitClause('and', new UnitClause(ruleC2.namespace, 'bind', '$R1', '$1'));
ruleC2.addNewUnitClause('and', new UnitClause(ruleC2.namespace, 'hasSibling', '$R1', '$R2'));
solver.addConstraint('and', ruleC2);
tmpRoots = solver.reduceToDNFRootFormulasOnly();
solver.mergeStoredRootsWithOutside(tmpRoots);
solver.store("C2", solver.DNFTypeRootFormulas);
solver.clear();
// ===== Rule C2 End =====

// // ===== Rule C1 Start =====
solver.addConstraint('and', new UnitClause(null, 'declareConstantString', '$P', 'scripts'));
solver.addConstraint('and', new UnitClause(null, 'bind', '$R1', '$1'));
solver.addConstraint('and', new CompoundClause('or', [rule05, rule07]));
tmpRoots = solver.reduceToDNFRootFormulasOnly();
solver.mergeStoredRootsWithOutside(tmpRoots, true);
solver.clear();
// ===== Rule C1 End =====


console.log(solver.output());