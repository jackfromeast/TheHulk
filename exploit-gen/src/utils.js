import { DOM_NODE_STANDARD } from "./constants/dom-node-standard.js";
import { DOM_NODE_TAG_MAP } from "./constants/dom-node-to-tag.js";
import fs from 'fs';

export class Utils {
  static globalCounter = 0;

  static generateUniqueId() {
    return Utils.globalCounter++;
  }

  /**
   * Return all possible nodes based on DOM_NODE_STANDARD.
   */
  static getAllNodeTypes() {
    return Object.keys(DOM_NODE_STANDARD);
  }

  static getNodeTag(nodeType) {
    if (DOM_NODE_TAG_MAP[nodeType]) {
      return DOM_NODE_TAG_MAP[nodeType];
    } else {
      console.log(`Node ${nodeType} does not have a tag.`);
      // throw new Error(`Node ${nodeType} does not have a tag.`);
    }
  }

  static getAllElementTypes() {
    let elements = Utils.getAllNodeTypes().filter(node => node.endsWith('Element'))
    return elements.map(node => {
      // Ingore the interface nodes.
      if (["Element", "HTMLElement", "HTMLMediaElement", "HTMLModElement", "SVGGraphicsElement", "SVGSVGElement"].includes(node)) { return ; }
      return node;
    });
  }

  static getAllElementTags() {
    let elements = Utils.getAllNodeTypes().filter(node => node.endsWith('Element'))
    return elements.map(node => {
      // Ingore the interface nodes.
      if (["Element", "HTMLElement", "HTMLMediaElement", "HTMLModElement", "SVGGraphicsElement"].includes(node)) { return ; }
      if (DOM_NODE_TAG_MAP[node]) {
        return DOM_NODE_TAG_MAP[node];
      } else {
        console.log(`Node ${node} does not have a tag.`);
        // throw new Error(`Node ${node} does not have a tag.`);
      }
    });
  }
  
  /**
   * Return all possible attributes for the given node types.
   * @param {Array<string>} nodeTypes - The possible node types.
   * @returns {Object} - A dictionary of attributes with '*' as the value.
   */
  static getAllAttributes(nodeTypes) {
    const attributes = {};

    nodeTypes.forEach((nodeType) => {
      if (DOM_NODE_STANDARD[nodeType]) {
        const { attributesDOMString, reflectAttributesDOMString } = DOM_NODE_STANDARD[nodeType];
        [...attributesDOMString, ...reflectAttributesDOMString].forEach(attr => {
          attributes[attr] = '*';
        });
      }
    });

    return attributes;
  }

  /**
   * Return all possible reflected attributes for the given node types.
   * @param {Array<string>} nodeTypes - The possible node types.
   * @returns {Object} - A dictionary of attributes with '*' as the value.
   */
  static getAllReflectedAttributes(nodeTypes) {
    const attributes = {};

    nodeTypes.forEach((nodeType) => {
      if (DOM_NODE_STANDARD[nodeType]) {
        const { reflectAttributesDOMString } = DOM_NODE_STANDARD[nodeType];
        [...reflectAttributesDOMString].forEach(attr => {
          attributes[attr] = '*';
        });
      }
    });

    return attributes;
  }

  /**
   * Return all possible reflected attributes for the given node types.
   * @param {string} nodeTypes - The possible node types.
   * @returns {Object} - A dictionary of attributes with '*' as the value.
   */
  static getReflectedAttributes(nodeType) {
    const attributes = {};
    if (DOM_NODE_STANDARD[nodeType]) {
      const { reflectAttributesDOMString } = DOM_NODE_STANDARD[nodeType];
      [...reflectAttributesDOMString].forEach(attr => {
        attributes[attr] = '*';
      });
    }
    return attributes;
  }

  /**
   * @description
   * -------------------
   * Read the taint flows from the given file path.
   * 
   * @param {*} filepath
   */
  static readTaintFlows(filepath){
    let taintFlows = [];
    try {
      const data = fs.readFileSync(filepath, 'utf8');
      const rawFlows = JSON.parse(data);
  
      // Extract the taint operations from the raw data
      for (let i = 0; i < rawFlows.length; i++) {
        const taintFlow = rawFlows[i].taintedValue;
        if (taintFlow.taintInfo){
          taintFlows.push(taintFlow.taintInfo.taintPropOperations);
        }
      }
  
      return taintFlows;
    } catch (err) {
      return taintFlows;
    }
  }


  
}
